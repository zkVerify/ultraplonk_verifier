use ark_bn254::Fr;
use ark_ff::MontFp;

pub const NEGATIVE_INVERSE_OF_2: Fr =
    MontFp!("10944121435919637611123202872628637544274182200208017171849102093287904247808");
pub const MAX_LOG2_CIRCUIT_SIZE: u32 = 28;

#[rustfmt::skip]
pub const fn root_of_unity(log2_circuit_size: u32) -> Option<Fr> {
    match log2_circuit_size {
        0 => Some(MontFp!("1")),
        1 => Some(MontFp!("21888242871839275222246405745257275088548364400416034343698204186575808495616")),
        2 => Some(MontFp!("21888242871839275217838484774961031246007050428528088939761107053157389710902")),
        3 => Some(MontFp!("19540430494807482326159819597004422086093766032135589407132600596362845576832")),
        4 => Some(MontFp!("14940766826517323942636479241147756311199852622225275649687664389641784935947")),
        5 => Some(MontFp!("4419234939496763621076330863786513495701855246241724391626358375488475697872")),
        6 => Some(MontFp!("9088801421649573101014283686030284801466796108869023335878462724291607593530")),
        7 => Some(MontFp!("10359452186428527605436343203440067497552205259388878191021578220384701716497")),
        8 => Some(MontFp!("3478517300119284901893091970156912948790432420133812234316178878452092729974")),
        9 => Some(MontFp!("6837567842312086091520287814181175430087169027974246751610506942214842701774")),
        10 => Some(MontFp!("3161067157621608152362653341354432744960400845131437947728257924963983317266")),
        11 => Some(MontFp!("1120550406532664055539694724667294622065367841900378087843176726913374367458")),
        12 => Some(MontFp!("4158865282786404163413953114870269622875596290766033564087307867933865333818")),
        13 => Some(MontFp!("197302210312744933010843010704445784068657690384188106020011018676818793232")),
        14 => Some(MontFp!("20619701001583904760601357484951574588621083236087856586626117568842480512645")),
        15 => Some(MontFp!("20402931748843538985151001264530049874871572933694634836567070693966133783803")),
        16 => Some(MontFp!("421743594562400382753388642386256516545992082196004333756405989743524594615")),
        17 => Some(MontFp!("12650941915662020058015862023665998998969191525479888727406889100124684769509")),
        18 => Some(MontFp!("11699596668367776675346610687704220591435078791727316319397053191800576917728")),
        19 => Some(MontFp!("15549849457946371566896172786938980432421851627449396898353380550861104573629")),
        20 => Some(MontFp!("17220337697351015657950521176323262483320249231368149235373741788599650842711")),
        21 => Some(MontFp!("13536764371732269273912573961853310557438878140379554347802702086337840854307")),
        22 => Some(MontFp!("12143866164239048021030917283424216263377309185099704096317235600302831912062")),
        23 => Some(MontFp!("934650972362265999028062457054462628285482693704334323590406443310927365533")),
        24 => Some(MontFp!("5709868443893258075976348696661355716898495876243883251619397131511003808859")),
        25 => Some(MontFp!("19200870435978225707111062059747084165650991997241425080699860725083300967194")),
        26 => Some(MontFp!("7419588552507395652481651088034484897579724952953562618697845598160172257810")),
        27 => Some(MontFp!("2082940218526944230311718225077035922214683169814847712455127909555749686340")),
        28 => Some(MontFp!("19103219067921713944291392827692070036145651957329286315305642004821462161904")),
        _ => None
    }
}

#[rustfmt::skip]
pub const fn inverse_root_of_unity(log2_circuit_size: u32) -> Option<Fr> {
    match log2_circuit_size {
        0 => Some(MontFp!("1")),
        1 => Some(MontFp!("21888242871839275222246405745257275088548364400416034343698204186575808495616")),
        2 => Some(MontFp!("4407920970296243842541313971887945403937097133418418784715")),
        3 => Some(MontFp!("8613538655231327379234925296132678673308827349856085326283699237864372525723")),
        4 => Some(MontFp!("1307561275430600547084599052067232502310777467428991595475612152992795732190")),
        5 => Some(MontFp!("17704588942648532530972307366230787358793284390049200127770755029903181125533")),
        6 => Some(MontFp!("17229388088320038940941618493830445303168092387362094847263546333820121606543")),
        7 => Some(MontFp!("10067055113802888859058817473382027434147393635895278855790546867998159022039")),
        8 => Some(MontFp!("14607982016670611764231825270871087984049314771307170893064215224383340934614")),
        9 => Some(MontFp!("4454167143980043278752049154306466674283043515884381413972070875762828983886")),
        10 => Some(MontFp!("12778298876169778406228797213426881932798803361417632112230249446762564930673")),
        11 => Some(MontFp!("7084581418787986735071448854094763219295258029926711144825058774682183758254")),
        12 => Some(MontFp!("12199007973319674300030596965685270475268514105269206407619072166392043015767")),
        13 => Some(MontFp!("10150407646632095964976043332470470774111901718625076075560248572110916115913")),
        14 => Some(MontFp!("18142009359664848239326142677843473397864013833933461205973266290502925059088")),
        15 => Some(MontFp!("2634751343596037565017197545354475911102667929471240448655836197743276834996")),
        16 => Some(MontFp!("5140356608766080911658973191056334943171726079648198768620744924931236053716")),
        17 => Some(MontFp!("16419199797069286018154632093538978307443519224016378057156716264399020428578")),
        18 => Some(MontFp!("1541269969666033564288134479432312471360749281324105455783803318974233777996")),
        19 => Some(MontFp!("3116737219246058688143980610047278814429847607725717372614734046457215800097")),
        20 => Some(MontFp!("7258560947846415542561780768613294257363507129322102188167496063542901903859")),
        21 => Some(MontFp!("11659200990322345718807248628124612382104968184461508881402467748242521510128")),
        22 => Some(MontFp!("21127102922101615655113539744490633064107973335785836023140550810086769562518")),
        23 => Some(MontFp!("15105891206315947268869527239612831406783849813020731466129847142773138696251")),
        24 => Some(MontFp!("17669819530932171850575605854287205839361219625478002463446569346762208408443")),
        25 => Some(MontFp!("18064615297038394135592655092948359603496706099886081984518755316185082953287")),
        26 => Some(MontFp!("20716846726688183385948282626360036421226389172715874196471832288581278120323")),
        27 => Some(MontFp!("7710462337341182847254412057802968168555825273744297413774005921806663137385")),
        28 => Some(MontFp!("776454056201908206186590970419435932130236139910903033203789591477115950462")),
        _ => None
    }
}

#[rustfmt::skip]
pub const fn domain_inverse(log2_circuit_size: u32) -> Option<Fr> {
    match log2_circuit_size {
        0 => Some(MontFp!("1")),
        1 => Some(MontFp!("10944121435919637611123202872628637544274182200208017171849102093287904247809")),
        2 => Some(MontFp!("16416182153879456416684804308942956316411273300312025757773653139931856371713")),
        3 => Some(MontFp!("19152212512859365819465605027100115702479818850364030050735928663253832433665")),
        4 => Some(MontFp!("20520227692349320520856005386178695395514091625390032197217066424914820464641")),
        5 => Some(MontFp!("21204235282094297871551205565717985242031228012903033270457635305745314480129")),
        6 => Some(MontFp!("21546239076966786546898805655487630165289796206659533807077919746160561487873")),
        7 => Some(MontFp!("21717240974403030884572605700372452626919080303537784075388061966368184991745")),
        8 => Some(MontFp!("21802741923121153053409505722814863857733722351976909209543133076471996743681")),
        9 => Some(MontFp!("21845492397480214137827955734036069473141043376196471776620668631523902619649")),
        10 => Some(MontFp!("21866867634659744680037180739646672280844703888306253060159436409049855557633")),
        11 => Some(MontFp!("21877555253249509951141793242451973684696534144361143701928820297812832026625")),
        12 => Some(MontFp!("21882899062544392586694099493854624386622449272388589022813512242194320261121")),
        13 => Some(MontFp!("21885570967191833904470252619555949737585406836402311683255858214385064378369")),
        14 => Some(MontFp!("21886906919515554563358329182406612413066885618409173013477031200480436436993")),
        15 => Some(MontFp!("21887574895677414892802367463831943750807625009412603678587617693528122466305")),
        16 => Some(MontFp!("21887908883758345057524386604544609419677994704914319011142910940051965480961")),
        17 => Some(MontFp!("21888075877798810139885396174900942254113179552665176677420557563313886988289")),
        18 => Some(MontFp!("21888159374819042681065900960079108671330771976540605510559380874944847741953")),
        19 => Some(MontFp!("21888201123329158951656153352668191879939568188478319927128792530760328118785")),
        20 => Some(MontFp!("21888221997584217086951279548962733484243966294447177135413498358668068307201")),
        21 => Some(MontFp!("21888232434711746154598842647110004286396165347431605739555851272621938401409")),
        22 => Some(MontFp!("21888237653275510688422624196183639687472264873923820041627027729598873448513")),
        23 => Some(MontFp!("21888240262557392955334514970720457388010314637169927192662615958087340972065")),
        24 => Some(MontFp!("21888241567198334088790460357988866238279339518792980768180410072331574733841")),
        25 => Some(MontFp!("21888242219518804655518433051623070663413851959604507555939307129453691614729")),
        26 => Some(MontFp!("21888242545679039938882419398440172875981108180010270949818755658014750055173")),
        27 => Some(MontFp!("21888242708759157580564412571848723982264736290213152646758479922295279275395")),
        28 => Some(MontFp!("21888242790299216401405409158552999535406550345314593495228342054435543885506")),
        _ => None
    }
}

#[cfg(test)]
mod test {
    use super::*;

    use ark_ff::{FftField, Field};

    #[test]
    fn negative_inverse_of_2_is_correct() {
        assert_eq!(NEGATIVE_INVERSE_OF_2, -MontFp!("2").inverse().unwrap())
    }

    #[test]
    fn max_log2_circuit_size_is_correct() {
        let max_log2_circuit_size = (0..64u32)
            .map(|n| (n, Fr::get_root_of_unity(2u64.checked_pow(n).unwrap())))
            .filter(|(_n, v)| v.is_some())
            .map(|(n, _v)| n)
            .last()
            .unwrap();
        assert_eq!(max_log2_circuit_size, MAX_LOG2_CIRCUIT_SIZE);
    }

    #[test]
    fn roots_of_unity() {
        for n in 0..=MAX_LOG2_CIRCUIT_SIZE {
            assert_eq!(
                root_of_unity(n).unwrap(),
                Fr::get_root_of_unity(2u64.pow(n)).unwrap(),
                "for n = {n}"
            );
        }
    }

    #[test]
    fn inverse_roots_of_unity() {
        for n in 0..=MAX_LOG2_CIRCUIT_SIZE {
            assert_eq!(
                inverse_root_of_unity(n).unwrap(),
                Fr::get_root_of_unity(2u64.pow(n))
                    .unwrap()
                    .inverse()
                    .unwrap(),
                "for n = {n}"
            );
        }
    }

    #[test]
    fn domain_inverses() {
        for n in 0..=MAX_LOG2_CIRCUIT_SIZE {
            assert_eq!(
                domain_inverse(n).unwrap(),
                Fr::from(2u64.pow(n)).inverse().unwrap(),
                "for n = {n}"
            );
        }
    }
}
